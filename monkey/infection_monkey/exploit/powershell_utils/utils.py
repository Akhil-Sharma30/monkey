from itertools import product
from typing import List, Optional, Tuple

AUTH_BASIC = "basic"
AUTH_NEGOTIATE = "negotiate"
ENCRYPTION_AUTO = "auto"
ENCRYPTION_NEVER = "never"


def get_credentials(
    usernames: List[str], passwords: List[str], is_windows: bool
) -> List[Tuple[Optional[str], Optional[str]]]:
    # When username or password is None, this instructs the powershell client to attempt to use
    # The current user's credentials. This is only valid if the client is running from a Windows
    # machine.

    credentials = []
    credentials.extend(_get_empty_credentials(is_windows))
    credentials.extend(_get_username_only_credentials(usernames, is_windows))
    credentials.extend(_get_username_password_credentials(usernames, passwords))

    return credentials


def _get_empty_credentials(is_windows: bool) -> List[Tuple[None, None]]:
    if is_windows:
        return [(None, None)]

    return []


def _get_username_only_credentials(
    usernames: List[str], is_windows: bool
) -> List[Tuple[str, Optional[str]]]:
    credentials = [(username, "") for username in usernames]

    if is_windows:
        credentials.extend([(username, None) for username in usernames])

    return credentials


def _get_username_password_credentials(
    usernames: List[str], passwords: List[str]
) -> List[Tuple[str, str]]:
    username_password_pairs = product(usernames, passwords)

    return [credentials for credentials in username_password_pairs]


def get_powershell_client_params(password: str) -> Tuple[bool, str, str]:
    ssl = password != ""
    auth = AUTH_NEGOTIATE if password != "" else AUTH_BASIC
    encryption = ENCRYPTION_AUTO if password != "" else ENCRYPTION_NEVER

    return (ssl, auth, encryption)
