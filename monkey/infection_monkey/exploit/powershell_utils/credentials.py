from dataclasses import dataclass
from itertools import product
from typing import List, Union


@dataclass
class Credentials:
    username: Union[str, None]
    password: Union[str, None]


def get_credentials(
    usernames: List[str], passwords: List[str], is_windows: bool
) -> List[Credentials]:
    credentials = []
    credentials.extend(_get_empty_credentials(is_windows))
    credentials.extend(_get_username_only_credentials(usernames, is_windows))
    credentials.extend(_get_username_password_credentials(usernames, passwords))

    return credentials


# On Windows systems, when username == None and password == None, the current user's credentials
# will be used to attempt to log into the victim.
def _get_empty_credentials(is_windows: bool) -> List[Credentials]:
    if is_windows:
        return [Credentials(username=None, password=None)]

    return []


# On Windows systems, when password == None, the current user's password will bu used to attempt to
# log into the victim.
def _get_username_only_credentials(usernames: List[str], is_windows: bool) -> List[Credentials]:
    credentials = [Credentials(username=username, password="") for username in usernames]

    if is_windows:
        credentials.extend(
            [Credentials(username=username, password=None) for username in usernames]
        )

    return credentials


def _get_username_password_credentials(
    usernames: List[str], passwords: List[str]
) -> List[Credentials]:
    username_password_pairs = product(usernames, passwords)

    return [Credentials(credentials[0], credentials[1]) for credentials in username_password_pairs]
