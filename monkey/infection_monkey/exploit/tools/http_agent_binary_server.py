from pathlib import PurePath
from typing import Sequence

from common.types import SocketAddress
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.i_puppet import TargetHost
from infection_monkey.network import TCPPortSelector
from infection_monkey.network.tools import get_interface_to_target
from infection_monkey.utils.script_dropper import build_bash_dropper


def start_agent_binary_server(
    target_host: TargetHost, agent_binary_repository: IAgentBinaryRepository, tcp_port_selector
) -> HTTPBytesServer:
    """
    Starts an HTTP server that serves the agent binary

    :param target_host: The host to serve the agent binary to
    :param agent_binary_repository: The repository that contains the agent binary
    :param tcp_port_selector: The TCP port selector to use

    :return: The started HTTPBytesServer that serves the agent binary
    :raises ValueError: If the operating system of the target host is unknown
    """
    if target_host.operating_system is None:
        raise ValueError("The operating system of the target host is unknown")

    agent_binary = agent_binary_repository.get_agent_binary(target_host.operating_system).read()

    return start_http_bytes_server(target_host, agent_binary, tcp_port_selector)


def start_dropper_script_server(
    target_host: TargetHost,
    agent_binary_repository: IAgentBinaryRepository,
    tcp_port_selector: TCPPortSelector,
    destination_path: PurePath,
    args: Sequence[str],
) -> HTTPBytesServer:
    """
    Starts an HTTP server that serves the dropper script

    :param target_host: The host for whom to serve the dropper script
    :param agent_binary_repository: The repository that contains the agent binary
    :param tcp_port_selector: The TCP port selector to use
    :param destination_path: The destination path into which to drop the agent payload
    :param args: The arguments to pass to the agent payload

    :return: The started HTTPBytesServer that serves the provided data
    """
    if target_host.operating_system is None:
        raise ValueError("The operating system of the target host is unknown")

    agent_binary = agent_binary_repository.get_agent_binary(target_host.operating_system).read()
    dropper_script = build_bash_dropper(destination_path, args, agent_binary)

    return start_http_bytes_server(target_host, dropper_script, tcp_port_selector)


def start_http_bytes_server(
    target_host: TargetHost, bytes_to_serve: bytes, tcp_port_selector: TCPPortSelector
) -> HTTPBytesServer:
    """
    Starts an HTTP server that serves the provided data

    :param target_host: The host to serve the agent binary to
    :param bytes_to_server: The data (bytes) that the server will server
    :param tcp_port_selector: The TCP port selector to use

    :return: The started HTTPBytesServer that serves the provided data
    """
    bind_address = _get_bind_address(target_host, tcp_port_selector)

    server = HTTPBytesServer(bind_address, bytes_to_serve)
    server.start()

    return server


def _get_bind_address(target_host: TargetHost, tcp_port_selector: TCPPortSelector) -> SocketAddress:
    bind_ip = get_interface_to_target(str(target_host.ip))
    bind_port = tcp_port_selector.get_free_tcp_port()

    return SocketAddress(ip=bind_ip, port=bind_port)
