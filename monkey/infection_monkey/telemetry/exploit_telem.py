from typing import Dict, List

from common.common_consts.telem_categories import TelemCategoryEnum
from infection_monkey.model.host import VictimHost
from infection_monkey.telemetry.base_telem import BaseTelem


class ExploitTelem(BaseTelem):
    def __init__(
        self,
        name: str,
        host: VictimHost,
        exploitation_result: bool,
        propagation_result: bool,
        info: Dict,
        attempts: List,
    ):
        """
        Default exploit telemetry constructor
        :param name: The name of exploiter used
        :param host: The host machine
        :param exploitation_result: The result of the exploitation attempt from the 'exploit_host'
                                    method
        :param propagation_result: The result of the propagation attempt from the 'exploit_host'
                                   method
        :param info: Information about the exploiter
        :param attempts: Information about the exploiter's attempts
        """
        super(ExploitTelem, self).__init__()

        self.name = name
        self.host = host.__dict__
        self.exploitation_result = exploitation_result
        self.propagation_result = propagation_result
        self.info = info
        self.attempts = attempts

    telem_category = TelemCategoryEnum.EXPLOIT

    def get_data(self) -> Dict:
        return {
            "exploitation_result": self.exploitation_result,
            "propagation_result": self.propagation_result,
            "machine": self.host,
            "exploiter": self.name,
            "info": self.info,
            "attempts": self.attempts,
        }
