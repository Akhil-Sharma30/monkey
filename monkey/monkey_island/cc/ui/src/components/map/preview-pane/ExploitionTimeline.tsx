import _ from 'lodash';
import React, {useEffect, useState} from 'react';
import MapNode from '../../types/MapNode';
import {OverlayTrigger, Tooltip} from 'react-bootstrap';
import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';
import {faQuestionCircle} from '@fortawesome/free-solid-svg-icons/faQuestionCircle';
import IslandHttpClient, {APIEndpoint} from '../../IslandHttpClient';
import LoadingIcon from '../../ui-components/LoadingIcon';


export type ExploitationAttempt = {
  source: string;
  success: boolean;
  timestamp: Date;
  exploiter_name: string;
}

export type ExploitationEvent = {
  source: string;
  success: boolean;
  timestamp: number;
  exploiter_name: string;
  target: string;
}

const ExploitionTimeline = (props: { node: MapNode }) => {

  const [exploitationAttempts, setExploitationAttempts] = useState<ExploitationAttempt[]>([]);
  const [loadingEvents, setLoadingEvents] = useState(true);

  function getExploitationEvents() {
    let url_args = {'type': 'ExploitationEvent'};
    IslandHttpClient.get(APIEndpoint.agentEvents, url_args)
      .then(res => res.body).then(events => {
        setExploitationAttempts(parseEvents(events, props.node));
        setLoadingEvents(false);
    })
  }

  useEffect(() => {
    getExploitationEvents();
    let oneSecond = 1000;
    const interval = setInterval(() => {
      getExploitationEvents();
    }, oneSecond);

    return () => clearInterval(interval)
  }, [props.node])

  function parseEvents(events: ExploitationEvent[], node: MapNode): ExploitationAttempt[] {
    let exploitationAttempts = [];
    let filteredEvents = events.filter(event => node.hasIp(event.target))
    for (const event of Object.values(filteredEvents)) {
      let iface = node.networkInterfaces.find(iface => iface.includes(event.target))
      if (iface !== undefined) {
        let timestampInMilliseconds: number = event.timestamp * 1000;
        exploitationAttempts.push({
          source: event.source,
          success: event.success,
          timestamp: new Date(timestampInMilliseconds),
          exploiter_name: event.exploiter_name
        });
      }
    }
    return exploitationAttempts;
  }

  return (
    <div className={'exploit-timeline'}>
      <h4 style={{'marginTop': '2em'}}>
        Exploit Timeline&nbsp;
        {generateToolTip('Timeline of exploit attempts. Red is successful. Gray is unsuccessful')}
      </h4>
      {loadingEvents ? <LoadingIcon /> :
      <ul className="timeline">
        {_.sortBy(exploitationAttempts, 'timestamp').map(attempt =>
          <li key={`${attempt.timestamp}${String(Math.random())}`}>
            <div className={'bullet ' + (attempt.success ? 'bad' : '')}/>
            <div>{new Date(attempt.timestamp).toLocaleString()}</div>
            <div>{attempt.source}</div>
            <div>{attempt.exploiter_name}</div>
          </li>
        )}
      </ul>
      }
    </div>
  )
}

function generateToolTip(text) {
  return (
    <OverlayTrigger placement="top"
                    overlay={<Tooltip id="tooltip">{text}</Tooltip>}
                    delay={{show: 250, hide: 400}}>
      <a><FontAwesomeIcon icon={faQuestionCircle} style={{'marginRight': '0.5em'}}/></a>
    </OverlayTrigger>
  );
}

export default ExploitionTimeline
