from dataclasses import dataclass
from enum import Enum
from typing import Type, Dict

from monkey_island.cc.services.reporting.issue_processing.exploit_processing.processors.cred_exploit import \
    CredExploitProcessor
from monkey_island.cc.services.reporting.issue_processing.exploit_processing.processors.exploit import ExploitProcessor
from monkey_island.cc.services.reporting.issue_processing.exploit_processing.processors.shellshock_exploit import \
    ShellShockExploitProcessor
from monkey_island.cc.services.reporting.issue_processing.exploit_processing.processors.zerologon import \
    ZerologonExploitProcessor


@dataclass
class ExploiterDescriptor:
    # Must match with class names of exploiters in Infection Monkey code
    class_name: str
    display_name: str
    processor: Type[object] = ExploitProcessor


class ExploiterDescriptorEnum(Enum):
    SMB = ExploiterDescriptor('SmbExploiter', 'SMB Exploiter', CredExploitProcessor)
    WMI = ExploiterDescriptor('WmiExploiter', 'WMI Exploiter', CredExploitProcessor)
    SSH = ExploiterDescriptor('SSHExploiter', 'SSH Exploiter', CredExploitProcessor)
    SAMBACRY = ExploiterDescriptor('SambaCryExploiter', 'SambaCry Exploiter', CredExploitProcessor)
    ELASTIC = ExploiterDescriptor('ElasticGroovyExploiter', 'Elastic Groovy Exploiter', ExploitProcessor)
    MS08_067 = ExploiterDescriptor('Ms08_067_Exploiter', 'Conficker Exploiter', ExploitProcessor)
    SHELLSHOCK = ExploiterDescriptor('ShellShockExploiter', 'ShellShock Exploiter', ShellShockExploitProcessor)
    STRUTS2 = ExploiterDescriptor('Struts2Exploiter', 'Struts2 Exploiter', ExploitProcessor)
    WEBLOGIC = ExploiterDescriptor('WebLogicExploiter', 'Oracle WebLogic Exploiter', ExploitProcessor)
    HADOOP = ExploiterDescriptor('HadoopExploiter', 'Hadoop/Yarn Exploiter', ExploitProcessor)
    MSSQL = ExploiterDescriptor('MSSQLExploiter', 'MSSQL Exploiter', ExploitProcessor)
    VSFTPD = ExploiterDescriptor('VSFTPDExploiter', 'VSFTPD Backdoor Exploiter', CredExploitProcessor)
    DRUPAL = ExploiterDescriptor('DrupalExploiter', 'Drupal Server Exploiter', ExploitProcessor)
    ZEROLOGON = ExploiterDescriptor('ZerologonExploiter', 'Zerologon Exploiter', ZerologonExploitProcessor)

    @staticmethod
    def __dict__() -> Dict[str, ExploiterDescriptor]:
        descriptor_dict = {}
        for descriptor in ExploiterDescriptorEnum:
            descriptor_dict[descriptor.value.class_name] = descriptor
        return descriptor_dict

    @staticmethod
    def get_display_name_by_class_name(class_name: str) -> str:
        return [descriptor.display_name.value
                for descriptor in ExploiterDescriptorEnum
                if descriptor.class_name.value == class_name][0]
