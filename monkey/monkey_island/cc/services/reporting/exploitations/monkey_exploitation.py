import logging
from dataclasses import dataclass
from typing import List, Sequence

from common.agent_events import ExploitationEvent
from monkey_island.cc.models import Machine
from monkey_island.cc.repository import IAgentEventRepository, IMachineRepository
from monkey_island.cc.services.reporting.issue_processing.exploit_processing.exploiter_descriptor_enum import (  # noqa: E501
    ExploiterDescriptorEnum,
)

logger = logging.getLogger(__name__)


@dataclass
class MonkeyExploitation:
    label: str
    ip_addresses: List[str]
    domain_name: str
    exploits: List[str]


def get_monkey_exploited(
    event_repository: IAgentEventRepository,
    machine_repository: IMachineRepository,
) -> List[MonkeyExploitation]:
    exploits = event_repository.get_events_by_type(ExploitationEvent)
    successful_exploits = [e for e in exploits if e.success]

    exploited_machines = {
        machine_repository.get_machines_by_ip(e.target)[0] for e in successful_exploits
    }

    exploited = [
        MonkeyExploitation(
            label=str(machine.network_interfaces[0].ip),
            ip_addresses=[str(iface.ip) for iface in machine.network_interfaces],
            domain_name="",
            exploits=get_exploits_used_on_node(machine, successful_exploits),
        )
        for machine in exploited_machines
    ]

    logger.info("Exploited nodes generated for reporting")

    return exploited


def get_exploits_used_on_node(
    machine: Machine,
    successful_exploits: Sequence[ExploitationEvent],
) -> List[str]:
    machine_ips = [iface.ip for iface in machine.network_interfaces]
    machine_exploits = (e for e in successful_exploits if e.target in machine_ips)
    return list(
        set(
            [
                ExploiterDescriptorEnum.get_by_class_name(exploit.exploiter_name).display_name
                for exploit in machine_exploits
                if exploit.success
            ]
        )
    )
