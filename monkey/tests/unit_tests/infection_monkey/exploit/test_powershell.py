from unittest.mock import MagicMock

import pytest

from infection_monkey.exploit import powershell
from infection_monkey.exploit.powershell_utils.auth_options import AuthOptions
from infection_monkey.exploit.powershell_utils.credentials import Credentials
from infection_monkey.model.host import VictimHost

# Use the path_win32api_get_user_name fixture for all tests in this module
pytestmark = pytest.mark.usefixtures("patch_win32api_get_user_name")

USER_LIST = ["user1", "user2"]
PASSWORD_LIST = ["pass1", "pass2"]
LM_HASH_LIST = ["bogo_lm_1"]
NT_HASH_LIST = ["bogo_nt_1", "bogo_nt_2"]
DROPPER_TARGET_PATH_64 = "C:\\agent64"


class AuthenticationErrorForTests(Exception):
    pass


@pytest.fixture
def powershell_arguments():
    options = {
        "dropper_target_path_win_64": DROPPER_TARGET_PATH_64,
        "credentials": {
            "exploit_user_list": USER_LIST,
            "exploit_password_list": PASSWORD_LIST,
            "exploit_lm_hash_list": LM_HASH_LIST,
            "exploit_ntlm_hash_list": NT_HASH_LIST,
        },
    }
    arguments = {
        "host": VictimHost("127.0.0.1"),
        "options": options,
        "current_depth": 2,
        "telemetry_messenger": MagicMock(),
        "agent_repository": MagicMock(),
    }
    return arguments


@pytest.fixture
def powershell_exploiter(monkeypatch):
    pe = powershell.PowerShellExploiter()

    monkeypatch.setattr(powershell, "AuthenticationError", AuthenticationErrorForTests)
    monkeypatch.setattr(powershell, "is_windows_os", lambda: True)
    monkeypatch.setattr("builtins.open", lambda _, __: MagicMock())

    return pe


def test_powershell_disabled(monkeypatch, powershell_exploiter, powershell_arguments):
    mock_powershell_client = MagicMock(side_effect=Exception)
    monkeypatch.setattr(powershell, "PowerShellClient", mock_powershell_client)

    exploit_result = powershell_exploiter.exploit_host(**powershell_arguments)
    assert not exploit_result.exploitation_success
    assert not exploit_result.propagation_success
    assert "disabled" in exploit_result.error_message


def test_powershell_http(monkeypatch, powershell_exploiter, powershell_arguments):
    def allow_http(_, credentials: Credentials, auth_options: AuthOptions):
        if not auth_options.ssl:
            raise AuthenticationErrorForTests
        else:
            raise Exception

    mock_powershell_client = MagicMock(side_effect=allow_http)
    monkeypatch.setattr(powershell, "PowerShellClient", mock_powershell_client)
    powershell_exploiter.exploit_host(**powershell_arguments)

    for call_args in mock_powershell_client.call_args_list:
        assert not call_args[0][2].ssl


def test_powershell_https(monkeypatch, powershell_exploiter, powershell_arguments):
    def allow_https(_, credentials: Credentials, auth_options: AuthOptions):
        if auth_options.ssl:
            raise AuthenticationErrorForTests
        else:
            raise Exception

    mock_powershell_client = MagicMock(side_effect=allow_https)
    monkeypatch.setattr(powershell, "PowerShellClient", mock_powershell_client)
    powershell_exploiter.exploit_host(**powershell_arguments)

    for call_args in mock_powershell_client.call_args_list:
        if call_args[0][1].secret != "" and call_args[0][1].secret != "dummy_password":
            assert call_args[0][2].ssl


def test_no_valid_credentials(monkeypatch, powershell_exploiter, powershell_arguments):
    mock_powershell_client = MagicMock(side_effect=AuthenticationErrorForTests)
    monkeypatch.setattr(powershell, "PowerShellClient", mock_powershell_client)

    exploit_result = powershell_exploiter.exploit_host(**powershell_arguments)
    assert not exploit_result.exploitation_success
    assert not exploit_result.propagation_success
    assert "Unable to authenticate" in exploit_result.error_message


def authenticate(mock_client):
    def inner(_, credentials: Credentials, auth_options: AuthOptions):
        if credentials.username == "user1" and credentials.secret == "pass2":
            return mock_client
        else:
            raise AuthenticationErrorForTests("Invalid credentials")

    return inner


def test_successful_copy(monkeypatch, powershell_exploiter, powershell_arguments):
    mock_client = MagicMock()

    monkeypatch.setattr(powershell, "PowerShellClient", mock_client)

    exploit_result = powershell_exploiter.exploit_host(**powershell_arguments)

    assert DROPPER_TARGET_PATH_64 in mock_client.return_value.copy_file.call_args[0][1]
    assert exploit_result.exploitation_success


def test_failed_copy(monkeypatch, powershell_exploiter, powershell_arguments):
    mock_client = MagicMock()
    mock_client.return_value.copy_file = MagicMock(side_effect=Exception("COPY FAILED"))

    monkeypatch.setattr(powershell, "PowerShellClient", mock_client)

    exploit_result = powershell_exploiter.exploit_host(**powershell_arguments)
    assert exploit_result.exploitation_success
    assert not exploit_result.propagation_success
    assert "copy" in exploit_result.error_message


def test_failed_monkey_execution(monkeypatch, powershell_exploiter, powershell_arguments):
    mock_client = MagicMock()
    mock_client.execute_cmd_as_detached_process = MagicMock(
        side_effect=Exception("EXECUTION FAILED")
    )

    mock_powershell_client = MagicMock(side_effect=authenticate(mock_client))
    monkeypatch.setattr(powershell, "PowerShellClient", mock_powershell_client)

    exploit_result = powershell_exploiter.exploit_host(**powershell_arguments)
    assert exploit_result.exploitation_success is True
    assert exploit_result.propagation_success is False
    assert "execute" in exploit_result.error_message


def test_successful_propagation(monkeypatch, powershell_exploiter, powershell_arguments):
    mock_client = MagicMock()
    monkeypatch.setattr(powershell, "PowerShellClient", mock_client)

    exploit_result = powershell_exploiter.exploit_host(**powershell_arguments)

    assert exploit_result.exploitation_success
    assert exploit_result.propagation_success


def test_login_attempts_correctly_reported(monkeypatch, powershell_exploiter, powershell_arguments):
    # 1st call is for determining HTTP/HTTPs. 6 remaining calls are actual login attempts. the 6th
    # login attempt doesn't throw an exception, signifying that login with credentials was
    # successful.
    connection_attempts = [True, Exception, Exception, Exception, Exception, Exception, True]
    mock_client = MagicMock(side_effect=connection_attempts)
    monkeypatch.setattr(powershell, "PowerShellClient", mock_client)

    exploit_result = powershell_exploiter.exploit_host(**powershell_arguments)

    successful_attempts = [attempt for attempt in exploit_result.attempts if attempt["result"]]
    unsuccessful_attempts = [
        attempt for attempt in exploit_result.attempts if not attempt["result"]
    ]

    assert len(exploit_result.attempts) == 6
    assert len(unsuccessful_attempts) == 5
    assert len(successful_attempts) == 1


def test_build_monkey_execution_command():
    host = VictimHost("127.0.0.1")
    depth = 2
    executable_path = "/tmp/test-monkey"

    cmd = powershell.build_monkey_execution_command(host, depth, executable_path)

    assert f"-d {depth}" in cmd
    assert executable_path in cmd
